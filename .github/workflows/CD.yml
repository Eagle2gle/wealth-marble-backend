name: Server API CD

on:
  pull_request:
    branches: [ "main", "dev", "deploy-test"]
    paths:
      - 'core/**'
      - 'api/**'
    types:
      - closed

jobs:
  build:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    steps:
      - name: 체크아웃
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - uses: actions/checkout@v3
      - name: 환경변수 입력
        run: |
          touch ./core/src/main/resources/application-mysql.yml
          echo "${{ secrets.APPLICATION_MYSQL }}" | base64 --decode > ./core/src/main/resources/application-mysql.yml
          touch ./api/src/main/resources/application-cloud.yml
          echo "${{ secrets.APPLICATION_CLOUD }}" | base64 --decode > ./api/src/main/resources/application-cloud.yml
          touch ./core/src/main/resources/application-oauth.yml
          echo "${{ secrets.APPLICATION_OAUTH }}" | base64 --decode > ./core/src/main/resources/application-oauth.yml


      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        #shell: bash
      - name: Build with Gradle
        run: ./gradlew clean :api:build --exclude-task test
        #shell: bash
      - name: 도커 이미지 빌드 및 도커 허브 푸쉬
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker build -t wm-api-server ./api
          docker tag wm-api-server ${{ secrets.DOCKERHUB_USERNAME }}/wm-api-server:${GITHUB_SHA::7}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/wm-api-server:${GITHUB_SHA::7}

      - name: execute remot ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_REMOTE_IP }}
          username: ${{ secrets.EC2_REMOTE_SSH_ID }}
          password: ${{ secrets.EC2_REMOTE_SSH_PASSWORD }}
          port: ${{ secrets.EC2_REMOTE_SSH_PORT }}
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f wm-api-server
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/wm-api-server:${GITHUB_SHA::7}
            docker run -d -p 8080:8080 --name wm-api-server ${{ secrets.DOCKERHUB_USERNAME }}/wm-api-server:${GITHUB_SHA::7}
            docker image prune -af

#      - name: Slack Deploy bot 실행
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          author_name: Backend Deploy Success
#          fields: repo,commit,message,author
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_DEPLOY_URL }}
#        if: always()

      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'Deploy ${{ job.status }} - wealth marble'
        if: always()